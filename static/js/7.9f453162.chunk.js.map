{"version":3,"sources":["redux/actions/admin.action.js","redux/actions/index.js","screens/HomeScreen/index.jsx"],"names":["getLabel","type","AdminTypes","GET_LABEL_REQUEST","payload","addNewLabel","name","ADD_LABEL_REQUEST","addNewLabelPic","url","ADD_LABEL_PIC_REQUEST","getOnePicture","GET_PICTURE_REQUEST","getLabelPicture","labels","GET_PICTURE_LABEL_REQUEST","getPictureNotLabel","GET_PICTURE_NOT_LABEL_REQUEST","editLabelPicture","label","EDIT_PICTURE_LABEL_REQUEST","getAllPicture","GET_ALL_PICTURE_REQUEST","addNewPicture","taken","ADD_PICTURE_REQUEST","setAllButPics","val","SET_ALL_BUT_PICS","addToCluster","values","ADD_TO_CLUSTER_REQUEST","connect","state","admin","dispatch","bindActionCreators","AdminActions","props","useState","history","Firebase","storage","ref","useHistory","useEffect","picInfo","allPictures","style","map","item","index","onClick","push","pathname","display","flexDirection","flexWrap","margin","height","width","src"],"mappings":"oHAAA,+gBAEaA,EAAW,iBAAO,CAC7BC,KAAMC,IAAWC,kBACjBC,QAAS,KAGEC,EAAc,SAACC,GAAD,MAAW,CACpCL,KAAMC,IAAWK,kBACjBH,QAAS,CAAEE,UAGAE,EAAiB,SAACF,EAAMG,GAAP,MAAgB,CAC5CR,KAAMC,IAAWQ,sBACjBN,QAAS,CAAEE,OAAMG,SAGNE,EAAgB,SAACF,GAAD,MAAU,CACrCR,KAAMC,IAAWU,oBACjBR,QAAS,CAAEK,SAGAI,EAAkB,SAACC,GAAD,MAAa,CAC1Cb,KAAMC,IAAWa,0BACjBX,QAAS,CAAEU,YAGAE,EAAqB,SAACF,GAAD,MAAa,CAC7Cb,KAAMC,IAAWe,8BACjBb,QAAS,CAAEU,YAGAI,EAAmB,SAACJ,EAAQL,EAAKU,GAAd,MAAyB,CACvDlB,KAAMC,IAAWkB,2BACjBhB,QAAS,CAAEU,SAAQL,MAAKU,WAGbE,EAAgB,iBAAO,CAClCpB,KAAMC,IAAWoB,wBACjBlB,QAAS,KAGEmB,EAAgB,SAACjB,EAAMkB,GAAP,MAAkB,CAC7CvB,KAAMC,IAAWuB,oBACjBrB,QAAS,CAAEE,OAAMkB,WAGNE,EAAgB,SAACC,GAAD,MAAU,CACrC1B,KAAMC,IAAW0B,iBACjBxB,QAASuB,IAGEE,EAAe,SAACC,EAAQhB,GAAT,MAAqB,CAC/Cb,KAAMC,IAAW6B,uBACjB3B,QAAS,CAAE0B,SAAQhB,a,iCCtDrB,gD,0LCsIekB,uBAlBS,SAACC,GACvB,MAAO,CAAEC,MAAOD,EAAMC,UAGG,SAACC,GAAD,OACzBC,YACE,CACE/B,YAAagC,IAAahC,YAC1BL,SAAUqC,IAAarC,SACvBQ,eAAgB6B,IAAa7B,eAC7BG,cAAe0B,IAAa1B,cAC5BE,gBAAiBwB,IAAaxB,gBAC9BQ,cAAegB,IAAahB,cAC5BE,cAAec,IAAad,eAE9BY,KAGWH,EA1HI,SAACM,GAAW,IAAD,EACAC,mBAAS,IADT,gCAEMA,mBAAS,KAFf,mBAItBC,GAJsB,UAGXC,IAASC,UAAUC,MACpBC,eAJY,EAKEL,mBAAS,CACrC,CAAEjC,KAAM,SACR,CAAEA,KAAM,QACR,CAAEA,KAAM,WARkB,6BAW5BuC,qBAAU,WAERP,EAAMtC,WACNsC,EAAMjB,kBACL,IAEH,IAqCMyB,EAAUR,EAAMJ,MAAMa,YAE5B,OACE,yBAAKC,MAAO,IACV,6BACGV,EAAMJ,MAAMpB,OAAOmC,KAAI,SAACC,EAAMC,GAC7B,OAAO,kBAAC,IAAD,KAASD,EAAK5C,SAEvB,kBAAC,IAAD,CACE8C,QAAS,WACPZ,EAAQa,KAAK,CACXC,SAAU,eAHhB,qBAUF,yBAAKN,MAAO,CAAEO,QAAS,OAAQC,cAAe,MAAOC,SAAU,SAC5DX,EAAQG,KAAI,SAACC,EAAMC,GAClB,OACE,yBACEH,MAAO,CACLU,OAAQ,MACRH,QAAS,OACTC,cAAe,WAGjB,yBACEG,OAAQ,IACRC,MAAO,IACPC,IAAKX,EAAK5C,KACV8C,QAAS,WACPZ,EAAQa,KAAK,CACXC,SAAU,UACVrB,MAAO,CAAExB,IAAKyC,EAAK5C,WAIxB4C,EAAKpC,OAAOmC,KAAI,SAACC,EAAMC,GACtB,OAAO,kBAAC,IAAD,KAASD,EAAK5C","file":"static/js/7.9f453162.chunk.js","sourcesContent":["import { AdminTypes } from \"../types\";\r\n\r\nexport const getLabel = () => ({\r\n  type: AdminTypes.GET_LABEL_REQUEST,\r\n  payload: {},\r\n});\r\n\r\nexport const addNewLabel = (name) => ({\r\n  type: AdminTypes.ADD_LABEL_REQUEST,\r\n  payload: { name },\r\n});\r\n\r\nexport const addNewLabelPic = (name, url) => ({\r\n  type: AdminTypes.ADD_LABEL_PIC_REQUEST,\r\n  payload: { name, url },\r\n});\r\n\r\nexport const getOnePicture = (url) => ({\r\n  type: AdminTypes.GET_PICTURE_REQUEST,\r\n  payload: { url },\r\n});\r\n\r\nexport const getLabelPicture = (labels) => ({\r\n  type: AdminTypes.GET_PICTURE_LABEL_REQUEST,\r\n  payload: { labels },\r\n});\r\n\r\nexport const getPictureNotLabel = (labels) => ({\r\n  type: AdminTypes.GET_PICTURE_NOT_LABEL_REQUEST,\r\n  payload: { labels },\r\n});\r\n\r\nexport const editLabelPicture = (labels, url, label) => ({\r\n  type: AdminTypes.EDIT_PICTURE_LABEL_REQUEST,\r\n  payload: { labels, url, label },\r\n});\r\n\r\nexport const getAllPicture = () => ({\r\n  type: AdminTypes.GET_ALL_PICTURE_REQUEST,\r\n  payload: {},\r\n});\r\n\r\nexport const addNewPicture = (name, taken) => ({\r\n  type: AdminTypes.ADD_PICTURE_REQUEST,\r\n  payload: { name, taken },\r\n});\r\n\r\nexport const setAllButPics = (val) => ({\r\n  type: AdminTypes.SET_ALL_BUT_PICS,\r\n  payload: val,\r\n});\r\n\r\nexport const addToCluster = (values, labels) => ({\r\n  type: AdminTypes.ADD_TO_CLUSTER_REQUEST,\r\n  payload: { values, labels },\r\n});\r\n","import * as AdminActions from \"./admin.action\";\r\n\r\n// Export all actions here!\r\nexport { AdminActions };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { Modal, Button, Image } from \"antd\";\r\nimport { ReactPictureAnnotation } from \"react-picture-annotation\";\r\nimport Firebase from \"firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { AdminActions } from \"../../redux/actions\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst HomeScreen = (props) => {\r\n  const [images, setImages] = useState([]);\r\n  const [imageMeta, setImageMeta] = useState([]);\r\n  let storageRef = Firebase.storage().ref();\r\n  const history = useHistory();\r\n  const [options, setOptions] = useState([\r\n    { name: \"happy\" },\r\n    { name: \"hell\" },\r\n    { name: \"hello\" },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // rando();\r\n    props.getLabel();\r\n    props.getAllPicture();\r\n  }, []);\r\n\r\n  const rando = async () => {\r\n    let images = await getFireImages();\r\n    let meta = await getFireImagesMeta();\r\n    setImages(images);\r\n    setImageMeta(meta);\r\n\r\n    // images.map((item, index) => {\r\n    //   props.addNewPicture(item, meta[index].timeCreated);\r\n    // });\r\n  };\r\n\r\n  const getFireImages = async () => {\r\n    try {\r\n      let result = await storageRef.listAll();\r\n\r\n      let urlPromises = result.items.map(async (imageRef) =>\r\n        imageRef.getDownloadURL()\r\n      );\r\n      return Promise.all(urlPromises);\r\n    } catch (error) {\r\n      console.log(\"er\", error);\r\n    }\r\n  };\r\n\r\n  const getFireImagesMeta = async () => {\r\n    try {\r\n      let result = await storageRef.listAll();\r\n\r\n      let urlPromises = result.items.map(async (imageRef) =>\r\n        imageRef.getMetadata()\r\n      );\r\n      return Promise.all(urlPromises);\r\n    } catch (error) {\r\n      console.log(\"er\", error);\r\n    }\r\n  };\r\n\r\n  const picInfo = props.admin.allPictures;\r\n\r\n  return (\r\n    <div style={{}}>\r\n      <div>\r\n        {props.admin.labels.map((item, index) => {\r\n          return <Button>{item.name}</Button>;\r\n        })}\r\n        <Button\r\n          onClick={() => {\r\n            history.push({\r\n              pathname: \"/cluster\",\r\n            });\r\n          }}\r\n        >\r\n          Go to clustering\r\n        </Button>\r\n      </div>\r\n      <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\r\n        {picInfo.map((item, index) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                margin: \".5%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <img\r\n                height={150}\r\n                width={200}\r\n                src={item.name}\r\n                onClick={() => {\r\n                  history.push({\r\n                    pathname: \"/single\",\r\n                    state: { url: item.name },\r\n                  });\r\n                }}\r\n              />\r\n              {item.labels.map((item, index) => {\r\n                return <Button>{item.name}</Button>;\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { admin: state.admin };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      addNewLabel: AdminActions.addNewLabel,\r\n      getLabel: AdminActions.getLabel,\r\n      addNewLabelPic: AdminActions.addNewLabelPic,\r\n      getOnePicture: AdminActions.getOnePicture,\r\n      getLabelPicture: AdminActions.getLabelPicture,\r\n      getAllPicture: AdminActions.getAllPicture,\r\n      addNewPicture: AdminActions.addNewPicture,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\r\n"],"sourceRoot":""}