{"version":3,"sources":["redux/actions/admin.action.js","redux/actions/index.js","screens/ClusteringScreen/index.jsx"],"names":["getLabel","type","AdminTypes","GET_LABEL_REQUEST","payload","addNewLabel","name","ADD_LABEL_REQUEST","addNewLabelPic","url","ADD_LABEL_PIC_REQUEST","getOnePicture","GET_PICTURE_REQUEST","getLabelPicture","labels","GET_PICTURE_LABEL_REQUEST","getPictureNotLabel","GET_PICTURE_NOT_LABEL_REQUEST","editLabelPicture","label","EDIT_PICTURE_LABEL_REQUEST","getAllPicture","GET_ALL_PICTURE_REQUEST","addNewPicture","taken","ADD_PICTURE_REQUEST","setAllButPics","val","SET_ALL_BUT_PICS","addToCluster","values","ADD_TO_CLUSTER_REQUEST","connect","state","admin","dispatch","bindActionCreators","AdminActions","props","useState","curclus","setCurClus","visible","setVisible","useHistory","useEffect","loading","style","width","onCancel","onOk","tempArray","allButPics","filter","el","selected","_id","display","flexDirection","flexWrap","map","item","index","margin","height","src","onClick","tempObj","pictures","Math","floor","random"],"mappings":"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","file":"static/js/6.5b64af9e.chunk.js","sourcesContent":["import { AdminTypes } from \"../types\";\r\n\r\nexport const getLabel = () => ({\r\n  type: AdminTypes.GET_LABEL_REQUEST,\r\n  payload: {},\r\n});\r\n\r\nexport const addNewLabel = (name) => ({\r\n  type: AdminTypes.ADD_LABEL_REQUEST,\r\n  payload: { name },\r\n});\r\n\r\nexport const addNewLabelPic = (name, url) => ({\r\n  type: AdminTypes.ADD_LABEL_PIC_REQUEST,\r\n  payload: { name, url },\r\n});\r\n\r\nexport const getOnePicture = (url) => ({\r\n  type: AdminTypes.GET_PICTURE_REQUEST,\r\n  payload: { url },\r\n});\r\n\r\nexport const getLabelPicture = (labels) => ({\r\n  type: AdminTypes.GET_PICTURE_LABEL_REQUEST,\r\n  payload: { labels },\r\n});\r\n\r\nexport const getPictureNotLabel = (labels) => ({\r\n  type: AdminTypes.GET_PICTURE_NOT_LABEL_REQUEST,\r\n  payload: { labels },\r\n});\r\n\r\nexport const editLabelPicture = (labels, url, label) => ({\r\n  type: AdminTypes.EDIT_PICTURE_LABEL_REQUEST,\r\n  payload: { labels, url, label },\r\n});\r\n\r\nexport const getAllPicture = () => ({\r\n  type: AdminTypes.GET_ALL_PICTURE_REQUEST,\r\n  payload: {},\r\n});\r\n\r\nexport const addNewPicture = (name, taken) => ({\r\n  type: AdminTypes.ADD_PICTURE_REQUEST,\r\n  payload: { name, taken },\r\n});\r\n\r\nexport const setAllButPics = (val) => ({\r\n  type: AdminTypes.SET_ALL_BUT_PICS,\r\n  payload: val,\r\n});\r\n\r\nexport const addToCluster = (values, labels) => ({\r\n  type: AdminTypes.ADD_TO_CLUSTER_REQUEST,\r\n  payload: { values, labels },\r\n});\r\n","import * as AdminActions from \"./admin.action\";\r\n\r\n// Export all actions here!\r\nexport { AdminActions };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { Modal, Button, Image } from \"antd\";\r\nimport { ReactPictureAnnotation } from \"react-picture-annotation\";\r\nimport Firebase from \"firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport Loading from \"../../components/Loading\";\r\nimport { AdminActions } from \"../../redux/actions\";\r\n\r\nimport \"./styles.css\";\r\nimport { setAllButPics } from \"../../redux/actions/admin.action\";\r\n\r\nconst ClusteringScreen = (props) => {\r\n  const [curclus, setCurClus] = useState({});\r\n  const [visible, setVisible] = useState(false);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    props.getLabel();\r\n  }, []);\r\n\r\n  if (props.admin.loading) {\r\n    return <Loading />;\r\n  } else {\r\n    return (\r\n      <div style={{}}>\r\n        <Modal\r\n          visible={visible}\r\n          width={1000}\r\n          onCancel={() => {\r\n            setVisible(false);\r\n          }}\r\n          onOk={() => {\r\n            let tempArray = props.admin.allButPics.filter((el) => {\r\n              return el.selected === true;\r\n            });\r\n            props.addToCluster(tempArray, [curclus._id]);\r\n\r\n            setVisible(false);\r\n          }}\r\n        >\r\n          <div\r\n            style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}\r\n          >\r\n            {props.admin.allButPics.map((item, index) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    margin: \".5%\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    height={150}\r\n                    width={200}\r\n                    src={item.name}\r\n                    onClick={() => {\r\n                      let tempObj = item;\r\n                      if (tempObj.selected) {\r\n                        tempObj.selected = false;\r\n                      } else {\r\n                        tempObj.selected = true;\r\n                      }\r\n                      let tempArray = props.admin.allButPics;\r\n                      tempArray[index] = tempObj;\r\n                      props.setAllButPics(tempArray);\r\n                    }}\r\n                  />\r\n                  {item.selected && <Button>Selected</Button>}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Modal>\r\n        <div>\r\n          Choose which cluster you would like to see!\r\n          {props.admin.labels.map((item, index) => {\r\n            return (\r\n              <Button\r\n                type={curclus.name === item.name ? \"primary\" : null}\r\n                onClick={() => {\r\n                  setCurClus(item);\r\n                  props.getLabelPicture([item._id]);\r\n                }}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            );\r\n          })}\r\n          <Button\r\n            onClick={() => {\r\n              if (curclus.name) {\r\n                setVisible(true);\r\n                props.getPictureNotLabel([curclus._id]);\r\n              }\r\n            }}\r\n          >\r\n            Add to the selected cluster\r\n          </Button>\r\n        </div>\r\n        <div\r\n          style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}\r\n        >\r\n          {props.admin.pictures.map((item, index) => {\r\n            const randomnumber = Math.floor(Math.random() * 10) % 3;\r\n            return (\r\n              <div\r\n                style={{\r\n                  margin: \".5%\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                }}\r\n              >\r\n                <img\r\n                  height={150}\r\n                  width={200}\r\n                  src={item.name}\r\n                  // onClick={() => {\r\n                  //   history.push({ pathname: \"/single\", state: { url: item } });\r\n                  // }}\r\n                />\r\n                <Button\r\n                  type=\"primary\"\r\n                  onClick={() => {\r\n                    props.editLabelPicture(\r\n                      [curclus._id],\r\n                      item.name,\r\n                      curclus._id\r\n                    );\r\n                  }}\r\n                >\r\n                  Remove\r\n                </Button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { admin: state.admin };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      addNewLabel: AdminActions.addNewLabel,\r\n      getLabel: AdminActions.getLabel,\r\n      addNewLabelPic: AdminActions.addNewLabelPic,\r\n      getOnePicture: AdminActions.getOnePicture,\r\n      getLabelPicture: AdminActions.getLabelPicture,\r\n      editLabelPicture: AdminActions.editLabelPicture,\r\n      getPictureNotLabel: AdminActions.getPictureNotLabel,\r\n      setAllButPics: AdminActions.setAllButPics,\r\n      addToCluster: AdminActions.addToCluster,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusteringScreen);\r\n"],"sourceRoot":""}